//
// Copyright 1995-2014 by Rebecca Ann Heineman becky@burgerbecky.com
//
// It is released under an MIT Open Source license. Please see LICENSE
// for license details. Yes, you can use it in a
// commercial title without paying anything, just give me a credit.
// Please? It's not like I'm asking you for money!
//
// http://disanji.net/iOS_Doc/#documentation/DeveloperTools/Conceptual/XcodeBuildSystem/300-Build_Settings/bs_build_settings.html
// https://developer.apple.com/library/mac/documentation/DeveloperTools/Reference/XcodeBuildSettingRef/1-Build_Setting_Reference/build_setting_ref.html
//

//
// Known processors for arch=
// m68k sparc hppa 
// ppc ppc7400 ppc970 ppc64
// i386 x86_64
// armv6 armv7 armv7s arm64
//

//
// Known sdk= parameters
//
// macosx10.5: OS X v10.5.
// macosx10.6: OS X v10.6.
// iphonesimulator3.2: iPhone Simulator 3.2.
// iphonesimulator4.0: iPhone Simulator 4.0.
// iphoneos3.2: iPhone Device 3.2.
// iphoneos4.0: iPhone Device 4.0.
//

//
// Object code suffixes
//

SUFFIX_Release = rel;
SUFFIX_Debug = dbg;
SUFFIX_Internal = int;
SUFFIX_Profile= pro;
SUFFIX = $(SUFFIX_$(CONFIGURATION));

//
// IDE version suffix
//

IDESUFFIX_0300 = xc3;
IDESUFFIX_0400 = xc4;
IDESUFFIX_0500 = xc5;
IDESUFFIX_0600 = xc5;
IDESUFFIX = $(IDESUFFIX_$(XCODE_VERSION_MAJOR));

//
// Architectures
//
// For mac build for stock PowerPC and Intel for both 32 and 64 bit targets
//
ARCHS_0300 = i386 x86_64 ppc ppc64;
ARCHS_0400 = i386 x86_64;
ARCHS_0500 = i386 x86_64;
ARCHS_0600 = i386 x86_64;
// For iOS, arm
ARCHS_0500[sdk=iphoneos*] = armv7 armv7s arm64;
ARCHS_0600[sdk=iphoneos*] = armv7 armv7s arm64;
ARCHS = $(ARCHS_$(XCODE_VERSION_MAJOR));

// Build active architecture

ONLY_ACTIVE_ARCH_Release = NO;
ONLY_ACTIVE_ARCH_Debug = YES;
ONLY_ACTIVE_ARCH_Internal = NO;
ONLY_ACTIVE_ARCH_Profile = YES;
ONLY_ACTIVE_ARCH = $(ONLY_ACTIVE_ARCH_$(CONFIGURATION));

//
// Minimum SDK is Mac OSX 10.5
//
SDKROOT_0300 = macosx10.5;
SDKROOT_0400 = macosx10.5;
SDKROOT_0500 = macosx10.8;
<<<<<<< HEAD
SDKROOT_0600 = macosx10.9;
=======
SDKROOT_0600 = macosx10.8;
>>>>>>> 8cfb6bc... Updated makeprojects to auto-generate iOS projects under XCode 5.x. iOS binaries are "fat", meaning they have armv7, armv7s, arm64, i386 and x86_64 binaries so it works both on a native device and on the simulators
SDKROOT_0500[sdk=iphoneos*] = iphoneos7.1;
SDKROOT_0600[sdk=iphoneos*] = iphoneos7.1;
SDKROOT = $(SDKROOT_$(XCODE_VERSION_MAJOR));

//
// OS Version for MacOSX
//

MACOSX_DEPLOYMENT_TARGET_0300 = 10.5
MACOSX_DEPLOYMENT_TARGET_0400 = 10.5
MACOSX_DEPLOYMENT_TARGET_0500 = 10.8
MACOSX_DEPLOYMENT_TARGET_0600 = 10.8
MACOSX_DEPLOYMENT_TARGET = $(MACOSX_DEPLOYMENT_TARGET_$(XCODE_VERSION_MAJOR))

//
// Minimum 3GS iPhone or later
//

IPHONEOS_DEPLOYMENT_TARGET = 6.0;

//
// Target iPad and iPhone for iOS
// Note: Must be in quotes, or Yoda will deny access
// to iPhone. Make angry Yoda, no.
//

//"TARGETED_DEVICE_FAMILY[sdk=iphone*]" = "1,2";

// Build locations

// Location to store the executable files
// CONFIGURATION_BUILD_DIR = $(BUILD_DIR)/$(CONFIGURATION)$(EFFECTIVE_PLATFORM_NAME);
CONFIGURATION_BUILD_DIR = $(SYMROOT)/$(PRODUCT_NAME)$(SUFFIX);

// Location to store the build files
// CONFIGURATION_TEMP_DIR = $(PROJECT_TEMP_DIR)/$(CONFIGURATION)$(EFFECTIVE_PLATFORM_NAME);
CONFIGURATION_TEMP_DIR = $(SYMROOT)/$(PRODUCT_NAME)$(SUFFIX);

// All build data goes into a folder called temp next to the project
//SYMROOT = build;
SYMROOT = temp;

// Compiler defines
// GCC_PREPROCESSOR_DEFINITIONS =;
GCC_PREPROCESSOR_DEFINITIONS = $(GCC_PREPROCESSOR_DEFINITIONS_$(CONFIGURATION));
GCC_PREPROCESSOR_DEFINITIONS_Release = NDEBUG;
GCC_PREPROCESSOR_DEFINITIONS_Debug = _DEBUG;
GCC_PREPROCESSOR_DEFINITIONS_Internal = _DEBUG;
GCC_PREPROCESSOR_DEFINITIONS_Profile = NDEBUG;

// Optimization settings

GCC_OPTIMIZATION_LEVEL = $(GCC_OPTIMIZATION_LEVEL_$(CONFIGURATION));
GCC_OPTIMIZATION_LEVEL_Release = s;
GCC_OPTIMIZATION_LEVEL_Debug = 0;
GCC_OPTIMIZATION_LEVEL_Internal = s;
GCC_OPTIMIZATION_LEVEL_Profile = s;

// Enable 64 bit registers for powerpc 64 bit
GCC_MODEL_PPC64 = NO;
GCC_MODEL_PPC64[arch=ppc64] = YES;

//
// Proposed output file name
//

// PRODUCT_NAME = ;
PRODUCT_NAME = $(TARGET_NAME);

// Strings file is UTF-8 (Burgerlib standard)
STRINGS_FILE_OUTPUT_ENCODING = UTF-8;

//
// Insert the build suffix
//

//EXECUTABLE_SUFFIX = $(SUFFIX).$EXECUTABLE_EXTENSION;

//
// Remove all dead code
//

DEAD_CODE_STRIPPING = YES;

//
// On powerpc, optimize for G4
//

//GCC_MODEL_TUNING = G4;
GCC_MODEL_TUNING = G4;

//
// Profile settings
//

GENERATE_PROFILING_CODE = $(GENERATE_PROFILING_CODE_$(CONFIGURATION));
GENERATE_PROFILING_CODE_Release = NO;
GENERATE_PROFILING_CODE_Debug = NO;
GENERATE_PROFILING_CODE_Internal = NO;
GENERATE_PROFILING_CODE_Profile = YES;

// Use LLVM GCC 4.2 to build everything (Default is GCC 4.0)
//GCC_VERSION = 4.0;
GCC_VERSION_0300 = com.apple.compilers.llvmgcc42;
GCC_VERSION_0400 = com.apple.compilers.llvmgcc42;
GCC_VERSION_0500 = com.apple.compilers.llvm.clang.1_0;
GCC_VERSION_0600 = com.apple.compilers.llvm.clang.1_0;
GCC_VERSION = $(GCC_VERSION_$(XCODE_VERSION_MAJOR))

// Dwarf debugging
//DEBUG_INFORMATION_FORMAT = ;
DEBUG_INFORMATION_FORMAT = $(DEBUG_INFORMATION_FORMAT_$(CONFIGURATION));
DEBUG_INFORMATION_FORMAT_Release = dwarf-with-dsym;
DEBUG_INFORMATION_FORMAT_Debug = dwarf;
DEBUG_INFORMATION_FORMAT_Internal = dwarf;
DEBUG_INFORMATION_FORMAT_Profile = dwarf;

// Mach-O executable
MACH_O_TYPE = mh_execute;

// Prebind my functions together
PREBINDING = YES;

// Where are my headers?
HEADER_SEARCH_PATHS = $(SDKS)/macosx/burgerlib $(SDKS)/macosx/burgerlib4;
HEADER_SEARCH_PATHS[sdk=iphone*] = $(SDKS)/ios/burgerlib;

// Where are my libraries?
LIBRARY_SEARCH_PATHS = $(SDKS)/macosx/burgerlib $(SDKS)/macosx/burgerlib4;
LIBRARY_SEARCH_PATHS[sdk=iphone*] = $(SDKS)/ios/burgerlib;

// Resource file search paths?
REZ_SEARCH_PATHS = $(SDKS)/macosx/burgerlib $(SDKS)/macosx/burgerlib4;
REZ_SEARCH_PATHS[sdk=iphone*] = $(SDKS)/ios/burgerlib;

// Use CodeWarrior inline assembly syntax
GCC_CW_ASM_SYNTAX = YES;

// Disable CPP Exceptions
GCC_ENABLE_CPP_EXCEPTIONS = NO;

// Disable CPP RTTI
GCC_ENABLE_CPP_RTTI = NO;

// Build everything as Objective C++
GCC_INPUT_FILETYPE = sourcecode.cpp.objcpp;

// Use the latest version of the Objective C++ dialect
GCC_C_LANGUAGE_STANDARD = gnu99;

// Don't emit code to make the static constructors thread safe
GCC_THREADSAFE_STATICS = NO;

// Only compatible with stabs, so disable it
GCC_ENABLE_SYMBOL_SEPARATION = NO;

// On old ARM chips, force 32 bit wide code
GCC_THUMB_SUPPORT[arch=armv6] = NO;

// Extra C flags
// Note: gcc4.2 on XCode 3 fails unit tests if -fomit-frame-pointer is invoked
OTHER_CFLAGS = $(OTHER_CFLAGS_$(CONFIGURATION)_$(IDESUFFIX));
OTHER_CFLAGS_Release_xc5 = -fomit-frame-pointer;
OTHER_CFLAGS_Debug_xc5 = ;
OTHER_CFLAGS_Internal_xc5 = -fomit-frame-pointer;
OTHER_CFLAGS_Profile_xc5 = -fomit-frame-pointer;
OTHER_CFLAGS_Release_xc3 = -fasm-blocks;
OTHER_CFLAGS_Debug_xc3 = -fasm-blocks;
OTHER_CFLAGS_Internal_xc3 = -fasm-blocks;
OTHER_CFLAGS_Profile_xc3 = -fasm-blocks;

// Enable Position dependent code for everything but x64
GCC_DYNAMIC_NO_PIC[arch=ppc] = YES;
GCC_DYNAMIC_NO_PIC[arch=ppc64] = YES;
GCC_DYNAMIC_NO_PIC[arch=i386] = YES;
GCC_DYNAMIC_NO_PIC[arch=x86_64] = NO;
GCC_DYNAMIC_NO_PIC[arch=armv6] = NO;
GCC_DYNAMIC_NO_PIC[arch=armv7] = NO;
GCC_DYNAMIC_NO_PIC[arch=armv7s] = NO;
GCC_DYNAMIC_NO_PIC[arch=arm64] = NO;
LD_NO_PIE = YES;

// Allow sse3 on intel
CLANG_X86_VECTOR_INSTRUCTIONS[arch=i386] = sse3;
CLANG_X86_VECTOR_INSTRUCTIONS[arch=x86_64] = sse3;

// Warnings, be paranoid

CLANG_WARN_BOOL_CONVERSION = YES;
CLANG_WARN_CONSTANT_CONVERSION = YES;
CLANG_WARN_EMPTY_BODY = YES;
CLANG_WARN_ENUM_CONVERSION = YES;
CLANG_WARN_INT_CONVERSION = YES;
CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;

GCC_WARN_CHECK_SWITCH_STATEMENTS = YES;
//GCC_WARN_EFFECTIVE_CPLUSPLUS_VIOLATIONS = YES;
GCC_WARN_SHADOW = YES;
GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
GCC_WARN_ALLOW_INCOMPLETE_PROTOCOL = YES;
GCC_WARN_INITIALIZER_NOT_FULLY_BRACKETED = YES;
GCC_WARN_ABOUT_RETURN_TYPE = YES;
GCC_WARN_MISSING_PARENTHESES = YES;
GCC_WARN_ABOUT_MISSING_PROTOTYPES = YES;
//GCC_WARN_ABOUT_MISSING_NEWLINE = YES;
GCC_WARN_NON_VIRTUAL_DESTRUCTOR = YES;
GCC_WARN_HIDDEN_VIRTUAL_FUNCTIONS = YES;
//GCC_WARN_PEDANTIC = YES;
GCC_WARN_ABOUT_POINTER_SIGNEDNESS = YES;
GCC_WARN_PROTOTYPE_CONVERSION = YES;
GCC_WARN_TYPECHECK_CALLS_TO_PRINTF = YES;

//GCC_WARN_UNINITIALIZED_AUTOS = YES;
GCC_WARN_UNINITIALIZED_AUTOS_Release = YES;
GCC_WARN_UNINITIALIZED_AUTOS_Debug = NO;
GCC_WARN_UNINITIALIZED_AUTOS_Internal = YES;
GCC_WARN_UNINITIALIZED_AUTOS_Profile = YES;
GCC_WARN_UNINITIALIZED_AUTOS = $(GCC_WARN_UNINITIALIZED_AUTOS_$(CONFIGURATION));

GCC_WARN_UNDECLARED_SELECTOR = YES;
GCC_WARN_UNUSED_FUNCTION = YES;
GCC_WARN_UNUSED_LABEL = YES;
GCC_WARN_UNUSED_PARAMETER = YES;
GCC_WARN_UNUSED_VALUE = YES;
GCC_WARN_UNUSED_VARIABLE = YES;

// Disable modification of PNG files when copying to iOS apps
COMPRESS_PNG_FILES = NO;
